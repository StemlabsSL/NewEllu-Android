// Generated by view binder compiler. Do not edit!
package com.stemlabs.ellu.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.stemlabs.ellu.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogMuteNotificationBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CheckBox checkBoxShowNotification;

  @NonNull
  public final LinearLayout ll1Week;

  @NonNull
  public final LinearLayout ll8Hours;

  @NonNull
  public final LinearLayout llAlways;

  @NonNull
  public final LinearLayout llShowNotifications;

  @NonNull
  public final RadioButton rb1Week;

  @NonNull
  public final RadioButton rb8Hours;

  @NonNull
  public final RadioButton rbAlways;

  @NonNull
  public final TextView tv1WeekLBL;

  @NonNull
  public final TextView tv8Hours;

  @NonNull
  public final TextView tvAlwaysLBL;

  @NonNull
  public final TextView tvCancelLBL;

  @NonNull
  public final TextView tvMuteNotificationLBL;

  @NonNull
  public final TextView tvOKLBL;

  @NonNull
  public final TextView tvShowNotification;

  private DialogMuteNotificationBinding(@NonNull LinearLayout rootView,
      @NonNull CheckBox checkBoxShowNotification, @NonNull LinearLayout ll1Week,
      @NonNull LinearLayout ll8Hours, @NonNull LinearLayout llAlways,
      @NonNull LinearLayout llShowNotifications, @NonNull RadioButton rb1Week,
      @NonNull RadioButton rb8Hours, @NonNull RadioButton rbAlways, @NonNull TextView tv1WeekLBL,
      @NonNull TextView tv8Hours, @NonNull TextView tvAlwaysLBL, @NonNull TextView tvCancelLBL,
      @NonNull TextView tvMuteNotificationLBL, @NonNull TextView tvOKLBL,
      @NonNull TextView tvShowNotification) {
    this.rootView = rootView;
    this.checkBoxShowNotification = checkBoxShowNotification;
    this.ll1Week = ll1Week;
    this.ll8Hours = ll8Hours;
    this.llAlways = llAlways;
    this.llShowNotifications = llShowNotifications;
    this.rb1Week = rb1Week;
    this.rb8Hours = rb8Hours;
    this.rbAlways = rbAlways;
    this.tv1WeekLBL = tv1WeekLBL;
    this.tv8Hours = tv8Hours;
    this.tvAlwaysLBL = tvAlwaysLBL;
    this.tvCancelLBL = tvCancelLBL;
    this.tvMuteNotificationLBL = tvMuteNotificationLBL;
    this.tvOKLBL = tvOKLBL;
    this.tvShowNotification = tvShowNotification;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogMuteNotificationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogMuteNotificationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_mute_notification, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogMuteNotificationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.checkBoxShowNotification;
      CheckBox checkBoxShowNotification = rootView.findViewById(id);
      if (checkBoxShowNotification == null) {
        break missingId;
      }

      id = R.id.ll1Week;
      LinearLayout ll1Week = rootView.findViewById(id);
      if (ll1Week == null) {
        break missingId;
      }

      id = R.id.ll8Hours;
      LinearLayout ll8Hours = rootView.findViewById(id);
      if (ll8Hours == null) {
        break missingId;
      }

      id = R.id.llAlways;
      LinearLayout llAlways = rootView.findViewById(id);
      if (llAlways == null) {
        break missingId;
      }

      id = R.id.llShowNotifications;
      LinearLayout llShowNotifications = rootView.findViewById(id);
      if (llShowNotifications == null) {
        break missingId;
      }

      id = R.id.rb1Week;
      RadioButton rb1Week = rootView.findViewById(id);
      if (rb1Week == null) {
        break missingId;
      }

      id = R.id.rb8Hours;
      RadioButton rb8Hours = rootView.findViewById(id);
      if (rb8Hours == null) {
        break missingId;
      }

      id = R.id.rbAlways;
      RadioButton rbAlways = rootView.findViewById(id);
      if (rbAlways == null) {
        break missingId;
      }

      id = R.id.tv1WeekLBL;
      TextView tv1WeekLBL = rootView.findViewById(id);
      if (tv1WeekLBL == null) {
        break missingId;
      }

      id = R.id.tv8Hours;
      TextView tv8Hours = rootView.findViewById(id);
      if (tv8Hours == null) {
        break missingId;
      }

      id = R.id.tvAlwaysLBL;
      TextView tvAlwaysLBL = rootView.findViewById(id);
      if (tvAlwaysLBL == null) {
        break missingId;
      }

      id = R.id.tvCancelLBL;
      TextView tvCancelLBL = rootView.findViewById(id);
      if (tvCancelLBL == null) {
        break missingId;
      }

      id = R.id.tvMuteNotificationLBL;
      TextView tvMuteNotificationLBL = rootView.findViewById(id);
      if (tvMuteNotificationLBL == null) {
        break missingId;
      }

      id = R.id.tvOKLBL;
      TextView tvOKLBL = rootView.findViewById(id);
      if (tvOKLBL == null) {
        break missingId;
      }

      id = R.id.tvShowNotification;
      TextView tvShowNotification = rootView.findViewById(id);
      if (tvShowNotification == null) {
        break missingId;
      }

      return new DialogMuteNotificationBinding((LinearLayout) rootView, checkBoxShowNotification,
          ll1Week, ll8Hours, llAlways, llShowNotifications, rb1Week, rb8Hours, rbAlways, tv1WeekLBL,
          tv8Hours, tvAlwaysLBL, tvCancelLBL, tvMuteNotificationLBL, tvOKLBL, tvShowNotification);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
